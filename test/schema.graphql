"Все возможные цвета в проекте."
enum COLOR {
  BLUE,
  GREEN,
  PURPLE,
  RED,
  YELLOW
}

"Область профессии (Android, iOS, backend etc.)"
enum FIELD {
  ANDROID,
  BACKEND,
  FRONTEND,
  IOS,
  QA
}

"Последняя заезд который совершил пользователь"
type LastRace {
  "Средняя скорость движения"
  averageSpeed: Int!
  "Количество правильных ответов"
  correctAnswersCount: Int!
  "Длительность выполнения заезда"
  time: Int!
}

"Текущее состояние доступных заездов"
type GameStatus {
  "Имеет неоконченный заезд"
  hasActiveRace: Boolean!
  "Имеет ли возможность пользователь запустить финальный заезд"
  hasFinalRace: Boolean!
  "Последняя заезд, который совершил пользователь"
  lastRace: LastRace
  "Кол-во доступных заездов"
  racesCountAvailable: Int!
  "Общее кол-во заездов на текущий день"
  racesCountPerDay: Int!
}

"Вопрос."
type NotAnsweredQuestion {
  "Индекс варианта ответа"
  answer: Int
  "Сложность вопроса"
  difficulty: Int!
  "Из какой области вопрос"
  field: FIELD!
  "Список возможных вариантов ответа"
  options: [String!]!
  "Список выбранных опций"
  selectedOptions: [Int!]!
  "Время когда вопрос был отправлен"
  sentAt: Int!
  "Заголовок"
  title: String!
}

"Профиль пользователя"
type UserProfile {
  "Средняя скорость лучшего заезда"
  bestAverageSpeed: Int
  "Время лучшего заезда"
  bestTime: Int
  "Цвет карта"
  cartColor: COLOR!
  "Цвет костюма"
  costumeColor: COLOR!
  "Кол-во сыгранных игр"
  gamesPlayed: Int!
  "Кол-во игр которое можно сыграть за этот день"
  gamesInDay: Int!
  "Имя пользователя"
  name: String!
  "Изображение профиля пользователя"
  profileImageUrl: String
  "Область разработки пользователя"
  field: FIELD!
}

"Пользователь который есть в рейтинге"
type RatingUser {
  "Средняя скорость лучшего заезда"
  bestAverageSpeed: Int!
  "Время лучшего заезда"
  bestTime: Int!
  "Цвет костюма на случай если аватарка отсутствует"
  costumeColor: COLOR!
  "Имя пользователя"
  name: String!
  "Изображение профиля пользователя"
  profileImageUrl: String
}

"Один из дней рейтинга"
type RatingDay {
  "Дата"
  day: Int!
  "Текущее положение в таблице"
  userPosition: Int
  "Список пользователей дня в порядке возрастания места"
  users: [RatingUser!]!
  "Кол-во пользователей которое принимало участие в этом дне"
  usersCount: Int!
}

#"Результат ответа на вопрос"
#type AnswerQuestionResult {
#  "Правильный ли был ответ"
#  isCorrect: Boolean!
#  "Следующий вопрос. Может отсутствовать"
#  nextQuestion: Question
#  "Индексы выбранных ответов"
#  selectedOptions: [Int!]!
#}

"Информация о цветах пользователя"
type ColorsInfo {
  "Цвет карта"
  cartColor: COLOR!
  "Цвет костюма"
  costumeColor: COLOR!
}

### =================================
### QUERY
### =================================
"Параметры вывода страницы рейтинга"
input RatingPageInput {
  "Дата"
  day: Int!
  "Номер страницы"
  page: Int!
}

type Query {
  "Возвращает состояние игры"
  gameStatus: GameStatus!
  "Возвращает информацию о цветах пользователя"
  colorsInfo: ColorsInfo!
  "Возвращает статус зарегистрированности в приложении текущего пользователя"
  isRegistered: Boolean!
  "Возвращает последние даты которые есть в БД"
  ratingDays(count: Int): [Int!]!
  "Возвращает первую страницу рейтинга и положение в ней текущего пользователя"
  RatingDay(day: Int!): RatingDay
  "Возвращает определенную страницу дня рейтинга"
  ratingDayPage(input: RatingPageInput!): [RatingUser!]!
  "Возвращает профиль пользователя"
  UserProfile: UserProfile!
}

### =================================
### MUTATION
### =================================
"Параметры ввода для регистрации"
input RegisterInput {
  "Цвет карта"
  cartColor: COLOR!
  "Цвет гоночного костюма"
  costumeColor: COLOR!
  "Профессия"
  field: FIELD!
  "Имя пользователя"
  name: String!
  "Изображение профиля пользователя"
  profileImageUrl: String
}

#"Параметры ввода для отправки ответа"
#input AnswerQuestionInput {
#  "Идентификатор вопроса"
#  id: Int!
#  "Индекс ответа"
#  answer: Int!
#}

type Mutation {
  #  "Выполняет ответ на вопрос"
  #  answerQuestion(input: AnswerQuestionInput!): AnswerQuestionResult
  "Регистрирует пользователя"
  register(input: RegisterInput!): Boolean
  #  "Запускает заезд и возвращает текущий вопрос"
  #  startRace: Race!
  "Обновляет цвет карта"
  updateCartColor(color: COLOR!): Boolean
  "Обновляет цвет костюма"
  updateCostumeColor(color: COLOR!): Boolean
}
